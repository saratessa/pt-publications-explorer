{"title":"“Stand on my shoulders as I stood on Fred Skinner’s shoulder. You see more big things from up here and you see further.” – Ogden Lindsley","markdown":{"yaml":{"title":"“Stand on my shoulders as I stood on Fred Skinner’s shoulder. You see more big things from up here and you see further.” – Ogden Lindsley","format":{"html":{"theme":"cosmo","toc":false}},"execute":{"echo":false,"warning":false,"message":false},"params":{"data_path":"s palos - Sheet1.csv","logo_path":"scc-logo.png"}},"headingText":"Theme","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\nlibrary(bslib)\nlibrary(htmltools)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(DT)\nlibrary(plotly)\nlibrary(crosstalk)\n\nbrand <- \"#E91E63\"\ntheme <- bs_theme(bootswatch = \"cosmo\")\nbs_theme_set(theme)\n\nread_publications <- function(path) {\n  df <- read_csv(path, show_col_types = FALSE, na = c(\"\", \"NA\", \"N/A\")) |>\n    clean_names()\n\n  nm <- names(df)\n  if (\"focus_area\" %in% nm && !\"focusarea\" %in% nm) df <- rename(df, focusarea = focus_area)\n  if (\"focus.area\" %in% nm && !\"focusarea\" %in% nm) df <- rename(df, focusarea = `focus.area`)\n  if (\"publication_type\" %in% nm && !\"publicationtype\" %in% nm) df <- rename(df, publicationtype = publication_type)\n  if (\"publication.type\" %in% nm && !\"publicationtype\" %in% nm) df <- rename(df, publicationtype = `publication.type`)\n  if (\"year\" %in% names(df)) suppressWarnings(df$year <- as.integer(df$year))\n\n  trim_if_char <- function(x) if (is.character(x)) str_trim(x) else x\n  df <- mutate(df, across(everything(), trim_if_char))\n  \n  link_candidates <- intersect(names(df), c(\"link\",\"url\",\"pdf\",\"doi\",\"weblink\",\"link_url\"))\n  if (length(link_candidates) == 0) {\n    df$link <- NA_character_\n  } else if (!\"link\" %in% names(df)) {\n    df$link <- df[[link_candidates[1]]]\n  }\n\n  # EXACT CSV text; blanks \"Unspecified\"\n  if (\"focusarea\" %in% names(df)) {\n    df$focusarea <- ifelse(is.na(df$focusarea) | df$focusarea == \"\", \"Unspecified\", df$focusarea)\n  } else {\n    df$focusarea <- \"Unspecified\"\n  }\n  if (\"publicationtype\" %in% names(df)) {\n    df$publicationtype <- ifelse(is.na(df$publicationtype) | df$publicationtype == \"\", \"Unspecified\", df$publicationtype)\n  } else {\n    df$publicationtype <- \"Unspecified\"\n  }\n\n  # Keep titles/authors \n  for (nm in intersect(c(\"title\",\"author\"), names(df))) {\n    df[[nm]] <- as.character(df[[nm]]) |> str_squish()\n  }\n\n  df |>\n    mutate(\n      .id = as.character(row_number()),\n      keyword_field = paste(title, focusarea, sep = \" | \"),\n      link_display = ifelse(is.na(link) | link == \"\", \"\", paste0(\"<a href='\", link, \"' target='_blank'>Open</a>\"))\n    )\n}\n\npubs <- read_publications(params$data_path)\n\n# SharedData for Crosstalk\nsd <- SharedData$new(pubs, key = ~.id, group = \"pubs\")\n```\n\n```{r}\nif (!is.null(params$logo_path) && file.exists(params$logo_path)) {\n  bslib::card(\n    bslib::card_body(\n      bslib::layout_columns(\n        col_widths = c(2, 10),\n        htmltools::img(src = params$logo_path, alt = \"Logo\", style = \"max-height:100px; border-radius:8px;\"),\n        htmltools::tagList(\n          htmltools::h4(\"Publications Explorer\"),\n          htmltools::div(style=\"opacity:.8;\",\n            \"Use filters to narrow by year, type, and focus area. Use the table search for author names or keywords.\"\n          )\n        )\n      )\n    )\n  )\n}\n\n```\n\n> New here? See [**About**](about.qmd) for what this explorer does and how to report fixes.\n\n### Filters and Stats\n\n```{r}\nbslib::layout_columns(\n  col_widths = c(4, 8),\n\n  # LEFT: Filters \n  bslib::card(\n    bslib::card_header(\"Filters\"),\n    bslib::card_body(\n      htmltools::tagList(\n        crosstalk::filter_slider(\"year\",  \"Year\",             sd, ~year),\n        crosstalk::filter_select(\"type\",  \"Publication type\", sd, ~publicationtype, multiple = TRUE),\n        crosstalk::filter_select(\"focus\", \"Focus area\",       sd, ~focusarea,       multiple = TRUE),\n        htmltools::div(\n          style = \"margin-top:.25rem; font-size:.9rem; opacity:.8;\",\n          \"Tip: Use the table’s global search for author names or topic keywords.\"\n        )\n      )\n    )\n  ),\n\n  # RIGHT: Stats \n  {\n    stats_df <- pubs |>\n      dplyr::summarise(\n        total    = dplyr::n(),\n        span     = paste0(min(year, na.rm = TRUE), \"–\", max(year, na.rm = TRUE)),\n        authors  = dplyr::n_distinct(author),\n        focuses  = dplyr::n_distinct(focusarea)\n      )\n\n    bslib::layout_column_wrap(\n      width = 1/2, heights_equal = \"all\",\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-total\",   stats_df$total),\n        title = \"Publications\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-span\",    stats_df$span),\n        title = \"Year span\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-authors\", stats_df$authors),\n        title = \"Unique author entries\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-focus\",   stats_df$focuses),\n        title = \"Focus areas\", theme_color = \"primary\"\n      )\n    )\n  }\n)\n\n```\n\n### Trends\n\n```{r}\nbslib::layout_columns(\n  col_widths = c(6, 6),\n\n  # Publications by Year\n  bslib::card(\n    bslib::card_header(\"Publications by Year\"),\n    bslib::card_body(\n      {\n        yr_min <- suppressWarnings(min(pubs$year, na.rm = TRUE))\n        yr_max <- suppressWarnings(max(pubs$year, na.rm = TRUE))\n        if (!is.finite(yr_min) || !is.finite(yr_max)) {\n          htmltools::div(\"No year data to display.\")\n        } else {\n          plotly::plot_ly(\n            sd,\n            x = ~year,\n            type = \"histogram\",\n            autobinx = FALSE,\n            xbins = list(\n              start = yr_min - 0.5,\n              end   = yr_max + 0.5,\n              size  = 1\n            ),\n            marker = list(color = \"#E91E63\") \n          ) |>\n            plotly::layout(\n              xaxis = list(\n                title = \"Year\",\n                tickmode = \"linear\",\n                dtick = 1,\n                tickangle = -45\n              ),\n              yaxis = list(title = \"Count\"),\n              bargap = 0.15\n            )\n        }\n      }\n    )\n  ),\n\n  # Publications by Type  \n  bslib::card(\n    bslib::card_header(\"Publications by Type\"),\n    bslib::card_body(\n      plotly::plot_ly(sd, x = ~publicationtype, type = \"histogram\",\n                      marker = list(color = \"#E91E63\")) |>\n        plotly::layout(xaxis = list(title = \"\"), yaxis = list(title = \"Count\"))\n    )\n  )\n)\n\n```\n\n### Focus Areas\n\n```{r}\nfa_counts <- pubs |> dplyr::count(focusarea, name = \"n\") |> dplyr::arrange(dplyr::desc(n)) |> dplyr::slice_head(n = 15)\n\nbslib::card(\n  bslib::card_header(\"Top Focus Areas\"),\n  bslib::card_body(\n    plotly::plot_ly(\n      sd,\n      y = ~factor(focusarea, levels = fa_counts$focusarea[order(fa_counts$n)]),\n      type = \"histogram\", orientation = \"h\",\n      marker = list(color = \"#E91E63\")\n    ) |>\n      plotly::layout(xaxis = list(title = \"Count\"), yaxis = list(title = \"\"), margin = list(l = 180))\n  )\n)\n\n```\n\n### Browse and Search\n\n```{r}\n# Build data frame  \ntbl_df <- pubs |>\n  dplyr::select(.id, year, publicationtype, focusarea, author, title, link_display, keyword_field)\n\nsd_tbl <- crosstalk::SharedData$new(tbl_df, key = ~.id, group = \"pubs\")\n\nescape_cols <- setdiff(seq_along(tbl_df), which(names(tbl_df) == \"link_display\"))\n\nbslib::card(\n  bslib::card_header(\"Publications Table\"),\n  bslib::card_body(\n    DT::datatable(\n      sd_tbl,\n      escape    = escape_cols,\n      rownames  = FALSE,\n      filter    = \"top\",\n      extensions = \"Buttons\",\n      options = list(\n        paging = FALSE,             \n        scrollY = \"50vh\",\n        scrollCollapse = TRUE,\n        autoWidth = TRUE,\n        dom = \"Bfrtip\",\n        buttons = c(\"copy\", \"csv\", \"excel\", \"print\"),\n        search  = list(search = \"\"),\n        columnDefs = list(list(visible = FALSE, targets = c(0, ncol(tbl_df) - 1)))\n      ),\n      colnames = c(\"\", \"Year\",\"Type\",\"Focus Area\",\"Author\",\"Title\",\"Link\",\"_kw_\"),\n      class = \"display nowrap compact\",\n      callback = DT::JS(\"\n        var table = this.api();\n\n        function visibleRowData(){\n          // With paging off + scroll, all filtered rows exist in the DOM (some off-screen).\n          var nodes = table.rows({search:'applied'}).nodes().to$();\n          var vis = nodes.filter(':visible'); // Crosstalk hides non-matching via display:none\n          return vis.map(function(){ return table.row(this).data(); }).get();\n        }\n\n        function uniqueNonEmpty(arr){\n          var s = {};\n          arr.forEach(function(x){\n            if (x && x.toString().trim() !== '') s[x.toString().trim()] = 1;\n          });\n          return Object.keys(s).length;\n        }\n\n        function updateStats(){\n          var rows = visibleRowData();\n          var total = rows.length;\n\n          // Columns (0-based): 0=.id, 1=Year, 2=Type, 3=Focus, 4=Author, 5=Title, 6=Link, 7=_kw_\n          var yrs = rows.map(function(r){ var n=parseInt(r[1],10); return isNaN(n)?null:n; })\n                        .filter(function(x){ return x!==null; });\n          var span = (yrs.length>0) ? (Math.min.apply(null, yrs) + '–' + Math.max.apply(null, yrs)) : '—';\n\n          var authors = rows.map(function(r){ return r[4]; });\n          var focuses = rows.map(function(r){ return r[3]; });\n\n          var el;\n          el = document.getElementById('stat-total');   if (el) el.textContent = total.toString();\n          el = document.getElementById('stat-span');    if (el) el.textContent = span;\n          el = document.getElementById('stat-authors'); if (el) el.textContent = uniqueNonEmpty(authors).toString();\n          el = document.getElementById('stat-focus');   if (el) el.textContent = uniqueNonEmpty(focuses).toString();\n        }\n\n        // Update when the table redraws\n        table.on('draw.dt search.dt order.dt', updateStats);\n\n        // Update when Crosstalk filters change\n        if (window.crosstalk) {\n          var fh = new crosstalk.FilterHandle('pubs');\n          fh.on('change', function(){ setTimeout(updateStats, 0); });\n          crosstalk.var('selection').on('change', function(){ setTimeout(updateStats, 0); });\n        }\n\n        // Initial compute\n        setTimeout(updateStats, 0);\n      \")\n    )\n  )\n)\n\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| include: false\nlibrary(bslib)\nlibrary(htmltools)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(DT)\nlibrary(plotly)\nlibrary(crosstalk)\n\n# Theme\nbrand <- \"#E91E63\"\ntheme <- bs_theme(bootswatch = \"cosmo\")\nbs_theme_set(theme)\n\nread_publications <- function(path) {\n  df <- read_csv(path, show_col_types = FALSE, na = c(\"\", \"NA\", \"N/A\")) |>\n    clean_names()\n\n  nm <- names(df)\n  if (\"focus_area\" %in% nm && !\"focusarea\" %in% nm) df <- rename(df, focusarea = focus_area)\n  if (\"focus.area\" %in% nm && !\"focusarea\" %in% nm) df <- rename(df, focusarea = `focus.area`)\n  if (\"publication_type\" %in% nm && !\"publicationtype\" %in% nm) df <- rename(df, publicationtype = publication_type)\n  if (\"publication.type\" %in% nm && !\"publicationtype\" %in% nm) df <- rename(df, publicationtype = `publication.type`)\n  if (\"year\" %in% names(df)) suppressWarnings(df$year <- as.integer(df$year))\n\n  trim_if_char <- function(x) if (is.character(x)) str_trim(x) else x\n  df <- mutate(df, across(everything(), trim_if_char))\n  \n  link_candidates <- intersect(names(df), c(\"link\",\"url\",\"pdf\",\"doi\",\"weblink\",\"link_url\"))\n  if (length(link_candidates) == 0) {\n    df$link <- NA_character_\n  } else if (!\"link\" %in% names(df)) {\n    df$link <- df[[link_candidates[1]]]\n  }\n\n  # EXACT CSV text; blanks \"Unspecified\"\n  if (\"focusarea\" %in% names(df)) {\n    df$focusarea <- ifelse(is.na(df$focusarea) | df$focusarea == \"\", \"Unspecified\", df$focusarea)\n  } else {\n    df$focusarea <- \"Unspecified\"\n  }\n  if (\"publicationtype\" %in% names(df)) {\n    df$publicationtype <- ifelse(is.na(df$publicationtype) | df$publicationtype == \"\", \"Unspecified\", df$publicationtype)\n  } else {\n    df$publicationtype <- \"Unspecified\"\n  }\n\n  # Keep titles/authors \n  for (nm in intersect(c(\"title\",\"author\"), names(df))) {\n    df[[nm]] <- as.character(df[[nm]]) |> str_squish()\n  }\n\n  df |>\n    mutate(\n      .id = as.character(row_number()),\n      keyword_field = paste(title, focusarea, sep = \" | \"),\n      link_display = ifelse(is.na(link) | link == \"\", \"\", paste0(\"<a href='\", link, \"' target='_blank'>Open</a>\"))\n    )\n}\n\npubs <- read_publications(params$data_path)\n\n# SharedData for Crosstalk\nsd <- SharedData$new(pubs, key = ~.id, group = \"pubs\")\n```\n\n```{r}\nif (!is.null(params$logo_path) && file.exists(params$logo_path)) {\n  bslib::card(\n    bslib::card_body(\n      bslib::layout_columns(\n        col_widths = c(2, 10),\n        htmltools::img(src = params$logo_path, alt = \"Logo\", style = \"max-height:100px; border-radius:8px;\"),\n        htmltools::tagList(\n          htmltools::h4(\"Publications Explorer\"),\n          htmltools::div(style=\"opacity:.8;\",\n            \"Use filters to narrow by year, type, and focus area. Use the table search for author names or keywords.\"\n          )\n        )\n      )\n    )\n  )\n}\n\n```\n\n> New here? See [**About**](about.qmd) for what this explorer does and how to report fixes.\n\n### Filters and Stats\n\n```{r}\nbslib::layout_columns(\n  col_widths = c(4, 8),\n\n  # LEFT: Filters \n  bslib::card(\n    bslib::card_header(\"Filters\"),\n    bslib::card_body(\n      htmltools::tagList(\n        crosstalk::filter_slider(\"year\",  \"Year\",             sd, ~year),\n        crosstalk::filter_select(\"type\",  \"Publication type\", sd, ~publicationtype, multiple = TRUE),\n        crosstalk::filter_select(\"focus\", \"Focus area\",       sd, ~focusarea,       multiple = TRUE),\n        htmltools::div(\n          style = \"margin-top:.25rem; font-size:.9rem; opacity:.8;\",\n          \"Tip: Use the table’s global search for author names or topic keywords.\"\n        )\n      )\n    )\n  ),\n\n  # RIGHT: Stats \n  {\n    stats_df <- pubs |>\n      dplyr::summarise(\n        total    = dplyr::n(),\n        span     = paste0(min(year, na.rm = TRUE), \"–\", max(year, na.rm = TRUE)),\n        authors  = dplyr::n_distinct(author),\n        focuses  = dplyr::n_distinct(focusarea)\n      )\n\n    bslib::layout_column_wrap(\n      width = 1/2, heights_equal = \"all\",\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-total\",   stats_df$total),\n        title = \"Publications\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-span\",    stats_df$span),\n        title = \"Year span\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-authors\", stats_df$authors),\n        title = \"Unique author entries\", theme_color = \"primary\"\n      ),\n      bslib::value_box(\n        value = htmltools::tags$span(id = \"stat-focus\",   stats_df$focuses),\n        title = \"Focus areas\", theme_color = \"primary\"\n      )\n    )\n  }\n)\n\n```\n\n### Trends\n\n```{r}\nbslib::layout_columns(\n  col_widths = c(6, 6),\n\n  # Publications by Year\n  bslib::card(\n    bslib::card_header(\"Publications by Year\"),\n    bslib::card_body(\n      {\n        yr_min <- suppressWarnings(min(pubs$year, na.rm = TRUE))\n        yr_max <- suppressWarnings(max(pubs$year, na.rm = TRUE))\n        if (!is.finite(yr_min) || !is.finite(yr_max)) {\n          htmltools::div(\"No year data to display.\")\n        } else {\n          plotly::plot_ly(\n            sd,\n            x = ~year,\n            type = \"histogram\",\n            autobinx = FALSE,\n            xbins = list(\n              start = yr_min - 0.5,\n              end   = yr_max + 0.5,\n              size  = 1\n            ),\n            marker = list(color = \"#E91E63\") \n          ) |>\n            plotly::layout(\n              xaxis = list(\n                title = \"Year\",\n                tickmode = \"linear\",\n                dtick = 1,\n                tickangle = -45\n              ),\n              yaxis = list(title = \"Count\"),\n              bargap = 0.15\n            )\n        }\n      }\n    )\n  ),\n\n  # Publications by Type  \n  bslib::card(\n    bslib::card_header(\"Publications by Type\"),\n    bslib::card_body(\n      plotly::plot_ly(sd, x = ~publicationtype, type = \"histogram\",\n                      marker = list(color = \"#E91E63\")) |>\n        plotly::layout(xaxis = list(title = \"\"), yaxis = list(title = \"Count\"))\n    )\n  )\n)\n\n```\n\n### Focus Areas\n\n```{r}\nfa_counts <- pubs |> dplyr::count(focusarea, name = \"n\") |> dplyr::arrange(dplyr::desc(n)) |> dplyr::slice_head(n = 15)\n\nbslib::card(\n  bslib::card_header(\"Top Focus Areas\"),\n  bslib::card_body(\n    plotly::plot_ly(\n      sd,\n      y = ~factor(focusarea, levels = fa_counts$focusarea[order(fa_counts$n)]),\n      type = \"histogram\", orientation = \"h\",\n      marker = list(color = \"#E91E63\")\n    ) |>\n      plotly::layout(xaxis = list(title = \"Count\"), yaxis = list(title = \"\"), margin = list(l = 180))\n  )\n)\n\n```\n\n### Browse and Search\n\n```{r}\n# Build data frame  \ntbl_df <- pubs |>\n  dplyr::select(.id, year, publicationtype, focusarea, author, title, link_display, keyword_field)\n\nsd_tbl <- crosstalk::SharedData$new(tbl_df, key = ~.id, group = \"pubs\")\n\nescape_cols <- setdiff(seq_along(tbl_df), which(names(tbl_df) == \"link_display\"))\n\nbslib::card(\n  bslib::card_header(\"Publications Table\"),\n  bslib::card_body(\n    DT::datatable(\n      sd_tbl,\n      escape    = escape_cols,\n      rownames  = FALSE,\n      filter    = \"top\",\n      extensions = \"Buttons\",\n      options = list(\n        paging = FALSE,             \n        scrollY = \"50vh\",\n        scrollCollapse = TRUE,\n        autoWidth = TRUE,\n        dom = \"Bfrtip\",\n        buttons = c(\"copy\", \"csv\", \"excel\", \"print\"),\n        search  = list(search = \"\"),\n        columnDefs = list(list(visible = FALSE, targets = c(0, ncol(tbl_df) - 1)))\n      ),\n      colnames = c(\"\", \"Year\",\"Type\",\"Focus Area\",\"Author\",\"Title\",\"Link\",\"_kw_\"),\n      class = \"display nowrap compact\",\n      callback = DT::JS(\"\n        var table = this.api();\n\n        function visibleRowData(){\n          // With paging off + scroll, all filtered rows exist in the DOM (some off-screen).\n          var nodes = table.rows({search:'applied'}).nodes().to$();\n          var vis = nodes.filter(':visible'); // Crosstalk hides non-matching via display:none\n          return vis.map(function(){ return table.row(this).data(); }).get();\n        }\n\n        function uniqueNonEmpty(arr){\n          var s = {};\n          arr.forEach(function(x){\n            if (x && x.toString().trim() !== '') s[x.toString().trim()] = 1;\n          });\n          return Object.keys(s).length;\n        }\n\n        function updateStats(){\n          var rows = visibleRowData();\n          var total = rows.length;\n\n          // Columns (0-based): 0=.id, 1=Year, 2=Type, 3=Focus, 4=Author, 5=Title, 6=Link, 7=_kw_\n          var yrs = rows.map(function(r){ var n=parseInt(r[1],10); return isNaN(n)?null:n; })\n                        .filter(function(x){ return x!==null; });\n          var span = (yrs.length>0) ? (Math.min.apply(null, yrs) + '–' + Math.max.apply(null, yrs)) : '—';\n\n          var authors = rows.map(function(r){ return r[4]; });\n          var focuses = rows.map(function(r){ return r[3]; });\n\n          var el;\n          el = document.getElementById('stat-total');   if (el) el.textContent = total.toString();\n          el = document.getElementById('stat-span');    if (el) el.textContent = span;\n          el = document.getElementById('stat-authors'); if (el) el.textContent = uniqueNonEmpty(authors).toString();\n          el = document.getElementById('stat-focus');   if (el) el.textContent = uniqueNonEmpty(focuses).toString();\n        }\n\n        // Update when the table redraws\n        table.on('draw.dt search.dt order.dt', updateStats);\n\n        // Update when Crosstalk filters change\n        if (window.crosstalk) {\n          var fh = new crosstalk.FilterHandle('pubs');\n          fh.on('change', function(){ setTimeout(updateStats, 0); });\n          crosstalk.var('selection').on('change', function(){ setTimeout(updateStats, 0); });\n        }\n\n        // Initial compute\n        setTimeout(updateStats, 0);\n      \")\n    )\n  )\n)\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"css":["custom.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":"cosmo","primary":"#E91E63","title":"“Stand on my shoulders as I stood on Fred Skinner’s shoulder. You see more big things from up here and you see further.” – Ogden Lindsley","params":{"data_path":"s palos - Sheet1.csv","logo_path":"scc-logo.png"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}